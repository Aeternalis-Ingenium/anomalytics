[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "anomalytics"
description = "The ultimate anomaly detection library."
readme = "README.md"
version = "0.2.2"
license = {file = "LICENSE"}
requires-python = ">=3.10"
authors = [
    {name = "Nino Lindenberg", email = "aeternalisingenium@proton.me"}
]
keywords = [
    "anomaly",
    "anomaly detection",
    "statistics",
    "mathematics",
    "software engineering",
    "data science",
    "data analyst",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries",
]
dependencies = [
"matplotlib>=3.7.2",
"numpy>=1.25.2",
"pandas>=2.0.3",
"scipy>=1.10.4",
]

[project.urls]
repository = "https://github.com/Aeternalis-Ingenium/anomalytics"
documentation = "https://github.com/Aeternalis-Ingenium/anomalytics/blob/trunk/README.md"

[project.optional-dependencies]
codequality = [
    "black>=23.11.0",
    "colorama>=0.4.6",
    "isort>=5.12.0",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
]
docs = ["sphinx>=7.2.6", "sphinx-rtd-theme>=2.0.0"]
security = ["bandit>=1.7.5"]
testcov = ["pytest-cov>=4.1.0"]
extra = ["openpyxl"]

[tool.bandit]
exclude_dirs = ["tests"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.black]
color=true
exclude = '''
    /(
        \.git
        | \._build
        | \.back.out
        | \.build
        | \.coverage
        | \.dist
        | \.hg
        | \.mypy_cache
        | \.tox
        | \.venv
        | ./src/coverage
        | blib2to3
        | ./tests
    )/
'''
include = '\.pyi?$'
line-length = 119

[tool.isort]
color_output = true
combine_as_imports = true
ensure_newline_before_comments = true
force_alphabetical_sort_within_sections = true
force_grid_wrap = 0
include_trailing_comma = true
line_length = 119
lines_between_sections = 1
multi_line_output = 3
profile = "black"
skip = [
    ".coverage",
    "coverage/*",
    "cov.*",
    ".dockerignore",
    ".env",
    ".github/*",
    ".gitignore",
    ".html",
    ".md",
    ".python-version",
    ".rst",
    ".xml"
]
skip_gitignore = true
src_paths = [
    "src/anomalytics",
    "tests/",
]
use_parentheses = true

[tool.mypy]
check_untyped_defs = true
color_output = true
error_summary = true
exclude = "(build|data|dist|docs/src|images|logo|logs|output)/"
ignore_missing_imports = true
pretty = true
strict_optional = true
warn_no_return = true
warn_return_any = false
files = "src/anomalytics"

[tool.pytest.ini_options]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test", "Acceptance"]
python_functions = ["test_*"]
testpaths = ["tests"]
filterwarnings = "error"
addopts = '''
    --verbose
    -p no:warnings
    --strict-markers
    --tb=short
    --cov=src/anomalytics
    --cov=tests
    --cov-branch
    --cov-report=term-missing
    --cov-report=html:coverage/cov.html
    --cov-report=xml:coverage/cov.xml
    --no-cov-on-fail
    --cov-fail-under=90
'''
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "def __repr__",
    "    ...",
]
fail_under = 90
precision = 1
skip_empty = true
sort = "-Cover"
